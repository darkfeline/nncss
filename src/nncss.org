#+TITLE: NNCSS
#+PROPERTY: header-args  :noweb-sep "\n\n" :noweb yes

What is NNCSS?

NNCSS is No Nonsense CSS, a simple CSS file that can be used to "publish"
documents written in HTML.

Simply put, it is a KISS CSS file that fixes the default styling of HTML so that
an HTML document is presentable without modification.

We are interested in proper documents that are marked up using HTML: Hyper Text
Markup Language (not Make A Pretty Website With Slideshows Language).

We are not interested in web design vomit: Javascript, drop-down menus,
sidebars, slideshows, and other forms of web design vomit have no place here.

This document describes what exactly NNCSS contains.

* Content width

  The width of A4 paper is 210 mm.  Based on this measure, I decided to make the
  content width for NNCSS 190 mm.

  #+NAME: width-and-center
  #+BEGIN_SRC css
    margin: 0 auto;
    max-width: 190mm;
  #+END_SRC

* Headers

  We apply a standard formatting to all header elements.  We use our general
  width and centering code from above, as well as setting shared top and bottom
  margin sizes.

  #+BEGIN_SRC css :noweb-ref css-all
    h1, h2, h3, h4, h5, h6 {
        <<width-and-center>>
        margin-top: 7mm;
        margin-bottom: 4mm;
    }
  #+END_SRC

  We also provide some special formatting for ~<h1>~, which is reserved for the
  title.

  #+BEGIN_SRC css :noweb-ref css-all
    h1 {
        text-align: center;
        margin-top: 15mm;
        margin-bottom: 7mm;
    }
  #+END_SRC

* Paragraphs

  Our styling for paragraphs uses the shared width and centering (I'll stop
  mentioning this later, everything will be using this shared styling).  In
  addition, use justification to make paragraphs look neat and add a bottom
  margin for spacing purposes.

  #+BEGIN_SRC css :noweb-ref css-all
    p {
        <<width-and-center>>
        text-align: justify;
        margin-bottom: 4mm;
    }
  #+END_SRC

* Tables

  We apply some general formatting for the ~<table>~ element.  Of note is
  collapsing the borders.  If we did not do that, the borders for the table rows
  below would not appear.

  #+BEGIN_SRC css :noweb-ref css-all
    table {
        <<width-and-center>>
        margin-top: 7mm;
        margin-bottom: 7mm;
        border-collapse: collapse;
    }
  #+END_SRC

  I believe that lines separating the rows of a table are essential.  Vertical
  lines are less important, although I may add a mechanism for these in the
  future, as used sparingly vertical lines may be helpful in some circumstances.

  #+BEGIN_SRC css :noweb-ref css-all
    tr {
        border-top: 1px black solid;
        border-bottom: 1px black solid;
    }
  #+END_SRC

  We add some padding for table cells to make it look nice.

  #+BEGIN_SRC css :noweb-ref css-all
    th, td {
        padding: 2mm;
    }
  #+END_SRC

* Images

  Images in HTML are considered inline block elements.  This is stupid, because
  there is no good reason for an image to be formatted inline in a document
  (that is, any page that presents content and not web design vomit).

  We fix this.

  We also add spacing around images so they have room to breathe.

  #+BEGIN_SRC css :noweb-ref css-all
    img {
        <<width-and-center>>
        display: block;
        margin-top: 7mm;
        margin-bottom: 7mm;
    }
  #+END_SRC

* Lists

  Again, we apply our shared width and centering style, along with some vertical
  spacing.

  #+BEGIN_SRC css :noweb-ref css-all
    ul, ol, dl {
        <<width-and-center>>
        margin-top: 4mm;
        margin-bottom: 4mm;
    }
  #+END_SRC

  The unordered and ordered lists do not require much further tweaking.  We add
  some space between each item for the eyes.

  #+BEGIN_SRC css :noweb-ref css-all
    li {
        margin-top: 1mm;
        margin-bottom: 1mm;
    }
  #+END_SRC

  Unfortunately, definition lists need more work because the default styling is
  wanting, but a few tweaks is all that is needed fix them.

  First, we fix the definition terms.  We float the definition terms to the
  left, bold them to add weight, and append a colon.  We want the text to align
  right, to bring the terms close to their definitions.  In order for the
  alignment to work, we have to define the width.  To finish, we add some
  padding space on the right to keep the terms from getting /too/ close to their
  definitions.

  Next, we fix the definition bodies.  We give them a left margin to make space
  for the terms and add a little vertical space for visual padding.

  The most complex part is getting the spacing right, but a handy visualization
  helps:

  #+BEGIN_EXAMPLE
    For <dt>:
        
    width + margin-right
        /---------\
        
          width
        /-------\
        
    For <dd>:
        
        margin-left
        /---------\
        
        ----------------------------------
        |         |                      |
        |   term: | definition           |
        |         |                      |
  #+END_EXAMPLE

  #+BEGIN_SRC css :noweb-ref css-all
    dt {
        float: left;
        clear: left;
        font-weight: bold;
        text-align: right;
        width: 27mm;
        margin-right: 3mm;
    }

    dt:after {
        content: ":";
    }

    dd {
        margin-left: 30mm;
        margin-top: 1mm;
        margin-bottom: 1mm;
    }
  #+END_SRC

* Preformatted text

  For preformatted text, we just need to limit the width.

  #+BEGIN_SRC css :noweb-ref css-all
    pre {
        <<width-and-center>>
    }
  #+END_SRC
  
* Final CSS code

  Our final CSS code:

  #+BEGIN_SRC css :tangle yes :padlines no
    <<css-all>>
  #+END_SRC
